//
// FX Version: fx_5_0
//
// 1 local buffer(s)
//
cbuffer cbPerObject
{
    Light   light;                      // Offset:    0, size:   56
    float3  diffuse;                    // Offset:   64, size:   12
    float3  specular;                   // Offset:   80, size:   12
    float4x4 mvp;                       // Offset:   96, size:   64
    float4x4 transInvMvp;               // Offset:  160, size:   64
    float4x4 model;                     // Offset:  224, size:   64
    float3  viewPos;                    // Offset:  288, size:   12
}

//
// 1 groups(s)
//
fxgroup
{
    //
    // 1 technique(s)
    //
    technique11
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   struct Light
                //   {
                //       
                //       float3 pos;                    // Offset:    0
                //       float Kc;                      // Offset:   12
                //       float3 dir;                    // Offset:   16
                //       float Ki;                      // Offset:   28
                //       float3 color;                  // Offset:   32
                //       float Kq;                      // Offset:   44
                //       float Phi;                     // Offset:   48
                //       float Theta;                   // Offset:   52
                //
                //   } light;                           // Offset:    0 Size:    56 [unused]
                //   float3 diffuse;                    // Offset:   64 Size:    12 [unused]
                //   float3 specular;                   // Offset:   80 Size:    12 [unused]
                //   float4x4 mvp;                      // Offset:   96 Size:    64
                //   float4x4 transInvMvp;              // Offset:  160 Size:    64
                //   float4x4 model;                    // Offset:  224 Size:    64
                //   float3 viewPos;                    // Offset:  288 Size:    12 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Position              0   xyzw        0      POS  float   xyzw
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // POSITION                 0   xyz         2     NONE  float   xyz 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[17], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_temps 4
                
                #line 35 "D:\CPPInstance\LearnDirectX\LeranDirect3D11\LeranDirect3D11_WithConsole\Shader\Sample4 Lighting\lightDemo.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[6].xyzw  // o<0:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[7].xyzw  // o<1:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[8].xyzw  // o<2:NaN:Inf>
                dp4 r1.w, r0.xyzw, cb0[9].xyzw  // o<3:NaN:Inf>
                dp3 r2.x, v1.xyzx, cb0[10].xyzx
                dp3 r2.y, v1.xyzx, cb0[11].xyzx
                dp3 r2.z, v1.xyzx, cb0[12].xyzx
                dp3 r2.w, r2.xyzx, r2.xyzx
                rsq r2.w, r2.w
                mul r2.xyz, r2.wwww, r2.xyzx  // o<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                dp4 r3.x, r0.xyzw, cb0[14].xyzw  // o<7:NaN:Inf>
                dp4 r3.y, r0.xyzw, cb0[15].xyzw  // o<8:NaN:Inf>
                dp4 r3.z, r0.xyzw, cb0[16].xyzw  // o<9:NaN:Inf>
                mov o0.xyzw, r1.xyzw  // vert<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyz, r2.xyzx  // vert<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                mov o2.xyz, r3.xyzx  // vert<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                ret 
                // Approximately 19 instruction slots used
                            
            };
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   struct Light
                //   {
                //       
                //       float3 pos;                    // Offset:    0
                //       float Kc;                      // Offset:   12
                //       float3 dir;                    // Offset:   16
                //       float Ki;                      // Offset:   28
                //       float3 color;                  // Offset:   32
                //       float Kq;                      // Offset:   44
                //       float Phi;                     // Offset:   48
                //       float Theta;                   // Offset:   52
                //
                //   } light;                           // Offset:    0 Size:    56
                //   float3 diffuse;                    // Offset:   64 Size:    12
                //   float3 specular;                   // Offset:   80 Size:    12
                //   float4x4 mvp;                      // Offset:   96 Size:    64 [unused]
                //   float4x4 transInvMvp;              // Offset:  160 Size:    64 [unused]
                //   float4x4 model;                    // Offset:  224 Size:    64 [unused]
                //   float3 viewPos;                    // Offset:  288 Size:    12
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Position              0   xyzw        0      POS  float       
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // POSITION                 0   xyz         2     NONE  float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[19], immediateIndexed
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_output o0.xyzw
                dcl_temps 5
                
                #line 42 "D:\CPPInstance\LearnDirectX\LeranDirect3D11\LeranDirect3D11_WithConsole\Shader\Sample4 Lighting\lightDemo.fx"
                dp3 r0.x, cb0[1].xyzx, cb0[1].xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, cb0[1].xyzx  // worldLightDir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                dp3 r0.w, v1.xyzx, v1.xyzx
                rsq r0.w, r0.w
                mul r1.xyz, r0.wwww, v1.xyzx  // worldNomral<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                dp3 r0.w, r1.xyzx, r0.xyzx
                mul r0.w, r0.w, l(0.500000)
                add r0.w, r0.w, l(0.500000)  // NdotL<0:NaN:Inf>
                
                #line 47
                mul r2.xyz, r0.wwww, cb0[4].xyzx
                mul r2.xyz, r2.xyzx, cb0[2].xyzx  // diff<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mul r3.xyz, r2.xyzx, l(0.100000, 0.100000, 0.100000, 0.000000)  // ambi<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r4.xyz, -v2.xyzx
                add r4.xyz, r4.xyzx, cb0[18].xyzx
                dp3 r0.w, r4.xyzx, r4.xyzx
                rsq r0.w, r0.w
                mul r4.xyz, r0.wwww, r4.xyzx  // worldViewDir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                add r0.xyz, r0.xyzx, r4.xyzx
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul r0.xyz, r0.wwww, r0.xyzx  // halfDir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                dp3 r0.x, r1.xyzx, r0.xyzx
                max r0.x, r0.x, l(0.000000)
                log r0.x, r0.x
                mul r0.x, r0.x, l(32.000000)
                exp r0.x, r0.x
                mul r0.xyz, r0.xxxx, cb0[5].xyzx  // specu<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                add r0.xyz, r0.xyzx, r3.xyzx
                add o0.xyz, r2.xyzx, r0.xyzx  // frag<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.w, l(1.000000)  // frag<3: 1f>
                ret 
                // Approximately 31 instruction slots used
                            
            };
        }

    }

}

